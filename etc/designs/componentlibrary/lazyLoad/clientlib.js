window.BarclaysComponentLibrary=function(e){var n={};function t(s){if(n[s])return n[s].exports;var a=n[s]={i:s,l:false,exports:{}};e[s].call(a.exports,a,a.exports,t);a.l=true;return a.exports}t.m=e;t.c=n;t.d=function(e,n,s){if(!t.o(e,n))Object.defineProperty(e,n,{enumerable:true,get:s})};t.r=function(e){if("undefined"!==typeof Symbol&&Symbol.toStringTag)Object.defineProperty(e,Symbol.toStringTag,{value:"Module"});Object.defineProperty(e,"__esModule",{value:true})};t.t=function(e,n){if(1&n)e=t(e);if(8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var s=Object.create(null);t.r(s);Object.defineProperty(s,"default",{enumerable:true,value:e});if(2&n&&"string"!=typeof e)for(var a in e)t.d(s,a,function(n){return e[n]}.bind(null,a));return s};t.n=function(e){var n=e&&e.__esModule?function n(){return e.default}:function n(){return e};t.d(n,"a",n);return n};t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)};t.p="/";return t(t.s=10026)}({10026:function(e,n,t){e.exports=t(10027)},10027:function(e,n,t){t(10028)},10028:function(e,n,t){t(2307)(t(10029))},10029:function(e,n){e.exports='(function (global, factory) {\n  typeof exports === \'object\' && typeof module !== \'undefined\' ? module.exports = factory() :\n  typeof define === \'function\' && define.amd ? define(factory) :\n  (global = typeof globalThis !== \'undefined\' ? globalThis : global || self, global.LazyLoad = factory());\n}(this, (function () { \'use strict\';\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  var runningOnBrowser = typeof window !== "undefined";\n  var isBot = runningOnBrowser && !("onscroll" in window) || typeof navigator !== "undefined" && /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent);\n  var supportsIntersectionObserver = runningOnBrowser && "IntersectionObserver" in window;\n  var supportsClassList = runningOnBrowser && "classList" in document.createElement("p");\n  var isHiDpi = runningOnBrowser && window.devicePixelRatio > 1;\n\n  var defaultSettings = {\n    elements_selector: ".lazy",\n    container: isBot || runningOnBrowser ? document : null,\n    threshold: 300,\n    thresholds: null,\n    data_src: "src",\n    data_srcset: "srcset",\n    data_sizes: "sizes",\n    data_bg: "bg",\n    data_bg_hidpi: "bg-hidpi",\n    data_bg_multi: "bg-multi",\n    data_bg_multi_hidpi: "bg-multi-hidpi",\n    data_bg_set: "bg-set",\n    data_poster: "poster",\n    class_applied: "applied",\n    class_loading: "loading",\n    class_loaded: "loaded",\n    class_error: "error",\n    class_entered: "entered",\n    class_exited: "exited",\n    unobserve_completed: true,\n    unobserve_entered: false,\n    cancel_on_exit: true,\n    callback_enter: null,\n    callback_exit: null,\n    callback_applied: null,\n    callback_loading: null,\n    callback_loaded: null,\n    callback_error: null,\n    callback_finish: null,\n    callback_cancel: null,\n    use_native: false,\n    restore_on_error: false\n  };\n  var getExtendedSettings = function getExtendedSettings(customSettings) {\n    return _extends({}, defaultSettings, customSettings);\n  };\n\n  /* Creates instance and notifies it through the window element */\n  var createInstance = function createInstance(classObj, options) {\n    var event;\n    var eventString = "LazyLoad::Initialized";\n    var instance = new classObj(options);\n\n    try {\n      // Works in modern browsers\n      event = new CustomEvent(eventString, {\n        detail: {\n          instance: instance\n        }\n      });\n    } catch (err) {\n      // Works in Internet Explorer (all versions)\n      event = document.createEvent("CustomEvent");\n      event.initCustomEvent(eventString, false, false, {\n        instance: instance\n      });\n    }\n\n    window.dispatchEvent(event);\n  };\n  /* Auto initialization of one or more instances of lazyload, depending on the \n      options passed in (plain object or an array) */\n\n\n  var autoInitialize = function autoInitialize(classObj, options) {\n    if (!options) {\n      return;\n    }\n\n    if (!options.length) {\n      // Plain object\n      createInstance(classObj, options);\n    } else {\n      // Array of objects\n      for (var i = 0, optionsItem; optionsItem = options[i]; i += 1) {\n        createInstance(classObj, optionsItem);\n      }\n    }\n  };\n\n  var SRC = "src";\n  var SRCSET = "srcset";\n  var SIZES = "sizes";\n  var POSTER = "poster";\n  var ORIGINALS = "llOriginalAttrs";\n  var DATA = "data";\n\n  var statusLoading = "loading";\n  var statusLoaded = "loaded";\n  var statusApplied = "applied";\n  var statusEntered = "entered";\n  var statusError = "error";\n  var statusNative = "native";\n\n  var dataPrefix = "data-";\n  var statusDataName = "ll-status";\n  var getData = function getData(element, attribute) {\n    return element.getAttribute(dataPrefix + attribute);\n  };\n  var setData = function setData(element, attribute, value) {\n    var attrName = dataPrefix + attribute;\n\n    if (value === null) {\n      element.removeAttribute(attrName);\n      return;\n    }\n\n    element.setAttribute(attrName, value);\n  };\n  var getStatus = function getStatus(element) {\n    return getData(element, statusDataName);\n  };\n  var setStatus = function setStatus(element, status) {\n    return setData(element, statusDataName, status);\n  };\n  var resetStatus = function resetStatus(element) {\n    return setStatus(element, null);\n  };\n  var hasEmptyStatus = function hasEmptyStatus(element) {\n    return getStatus(element) === null;\n  };\n  var hasStatusLoading = function hasStatusLoading(element) {\n    return getStatus(element) === statusLoading;\n  };\n  var hasStatusError = function hasStatusError(element) {\n    return getStatus(element) === statusError;\n  };\n  var hasStatusNative = function hasStatusNative(element) {\n    return getStatus(element) === statusNative;\n  };\n  var statusesAfterLoading = [statusLoading, statusLoaded, statusApplied, statusError];\n  var hadStartedLoading = function hadStartedLoading(element) {\n    return statusesAfterLoading.indexOf(getStatus(element)) >= 0;\n  };\n\n  var safeCallback = function safeCallback(callback, arg1, arg2, arg3) {\n    if (!callback) {\n      return;\n    }\n\n    if (arg3 !== undefined) {\n      callback(arg1, arg2, arg3);\n      return;\n    }\n\n    if (arg2 !== undefined) {\n      callback(arg1, arg2);\n      return;\n    }\n\n    callback(arg1);\n  };\n\n  var addClass = function addClass(element, className) {\n    if (supportsClassList) {\n      element.classList.add(className);\n      return;\n    }\n\n    element.className += (element.className ? " " : "") + className;\n  };\n  var removeClass = function removeClass(element, className) {\n    if (supportsClassList) {\n      element.classList.remove(className);\n      return;\n    }\n\n    element.className = element.className.replace(new RegExp("(^|\\\\s+)" + className + "(\\\\s+|$)"), " ").replace(/^\\s+/, "").replace(/\\s+$/, "");\n  };\n\n  var addTempImage = function addTempImage(element) {\n    element.llTempImage = document.createElement("IMG");\n  };\n  var deleteTempImage = function deleteTempImage(element) {\n    delete element.llTempImage;\n  };\n  var getTempImage = function getTempImage(element) {\n    return element.llTempImage;\n  };\n\n  var unobserve = function unobserve(element, instance) {\n    if (!instance) return;\n    var observer = instance._observer;\n    if (!observer) return;\n    observer.unobserve(element);\n  };\n  var resetObserver = function resetObserver(observer) {\n    observer.disconnect();\n  };\n  var unobserveEntered = function unobserveEntered(element, settings, instance) {\n    if (settings.unobserve_entered) unobserve(element, instance);\n  };\n\n  var updateLoadingCount = function updateLoadingCount(instance, delta) {\n    if (!instance) return;\n    instance.loadingCount += delta;\n  };\n  var decreaseToLoadCount = function decreaseToLoadCount(instance) {\n    if (!instance) return;\n    instance.toLoadCount -= 1;\n  };\n  var setToLoadCount = function setToLoadCount(instance, value) {\n    if (!instance) return;\n    instance.toLoadCount = value;\n  };\n  var isSomethingLoading = function isSomethingLoading(instance) {\n    return instance.loadingCount > 0;\n  };\n  var haveElementsToLoad = function haveElementsToLoad(instance) {\n    return instance.toLoadCount > 0;\n  };\n\n  var getSourceTags = function getSourceTags(parentTag) {\n    var sourceTags = [];\n\n    for (var i = 0, childTag; childTag = parentTag.children[i]; i += 1) {\n      if (childTag.tagName === "SOURCE") {\n        sourceTags.push(childTag);\n      }\n    }\n\n    return sourceTags;\n  };\n\n  var forEachPictureSource = function forEachPictureSource(element, fn) {\n    var parent = element.parentNode;\n\n    if (!parent || parent.tagName !== "PICTURE") {\n      return;\n    }\n\n    var sourceTags = getSourceTags(parent);\n    sourceTags.forEach(fn);\n  };\n  var forEachVideoSource = function forEachVideoSource(element, fn) {\n    var sourceTags = getSourceTags(element);\n    sourceTags.forEach(fn);\n  };\n\n  var attrsSrc = [SRC];\n  var attrsSrcPoster = [SRC, POSTER];\n  var attrsSrcSrcsetSizes = [SRC, SRCSET, SIZES];\n  var attrsData = [DATA];\n  var hasOriginalAttrs = function hasOriginalAttrs(element) {\n    return !!element[ORIGINALS];\n  };\n  var getOriginalAttrs = function getOriginalAttrs(element) {\n    return element[ORIGINALS];\n  };\n  var deleteOriginalAttrs = function deleteOriginalAttrs(element) {\n    return delete element[ORIGINALS];\n  }; // ## SAVE ##\n\n  var setOriginalsObject = function setOriginalsObject(element, attributes) {\n    if (hasOriginalAttrs(element)) {\n      return;\n    }\n\n    var originals = {};\n    attributes.forEach(function (attribute) {\n      originals[attribute] = element.getAttribute(attribute);\n    });\n    element[ORIGINALS] = originals;\n  };\n  var saveOriginalBackgroundStyle = function saveOriginalBackgroundStyle(element) {\n    if (hasOriginalAttrs(element)) {\n      return;\n    }\n\n    element[ORIGINALS] = {\n      backgroundImage: element.style.backgroundImage\n    };\n  }; // ## RESTORE ##\n\n  var setOrResetAttribute = function setOrResetAttribute(element, attrName, value) {\n    if (!value) {\n      element.removeAttribute(attrName);\n      return;\n    }\n\n    element.setAttribute(attrName, value);\n  };\n\n  var restoreOriginalAttrs = function restoreOriginalAttrs(element, attributes) {\n    if (!hasOriginalAttrs(element)) {\n      return;\n    }\n\n    var originals = getOriginalAttrs(element);\n    attributes.forEach(function (attribute) {\n      setOrResetAttribute(element, attribute, originals[attribute]);\n    });\n  };\n  var restoreOriginalBgImage = function restoreOriginalBgImage(element) {\n    if (!hasOriginalAttrs(element)) {\n      return;\n    }\n\n    var originals = getOriginalAttrs(element);\n    element.style.backgroundImage = originals.backgroundImage;\n  };\n\n  var manageApplied = function manageApplied(element, settings, instance) {\n    addClass(element, settings.class_applied);\n    setStatus(element, statusApplied); // Instance is not provided when loading is called from static class\n\n    if (!instance) return;\n\n    if (settings.unobserve_completed) {\n      // Unobserve now because we can\'t do it on load\n      unobserve(element, settings);\n    }\n\n    safeCallback(settings.callback_applied, element, instance);\n  };\n  var manageLoading = function manageLoading(element, settings, instance) {\n    addClass(element, settings.class_loading);\n    setStatus(element, statusLoading); // Instance is not provided when loading is called from static class\n\n    if (!instance) return;\n    updateLoadingCount(instance, +1);\n    safeCallback(settings.callback_loading, element, instance);\n  };\n  var setAttributeIfValue = function setAttributeIfValue(element, attrName, value) {\n    if (!value) {\n      return;\n    }\n\n    element.setAttribute(attrName, value);\n  };\n  var setImageAttributes = function setImageAttributes(element, settings) {\n    setAttributeIfValue(element, SIZES, getData(element, settings.data_sizes));\n    setAttributeIfValue(element, SRCSET, getData(element, settings.data_srcset));\n    setAttributeIfValue(element, SRC, getData(element, settings.data_src));\n  };\n  var setSourcesImg = function setSourcesImg(imgEl, settings) {\n    forEachPictureSource(imgEl, function (sourceTag) {\n      setOriginalsObject(sourceTag, attrsSrcSrcsetSizes);\n      setImageAttributes(sourceTag, settings);\n    });\n    setOriginalsObject(imgEl, attrsSrcSrcsetSizes);\n    setImageAttributes(imgEl, settings);\n  };\n  var setSourcesIframe = function setSourcesIframe(iframe, settings) {\n    setOriginalsObject(iframe, attrsSrc);\n    setAttributeIfValue(iframe, SRC, getData(iframe, settings.data_src));\n  };\n  var setSourcesVideo = function setSourcesVideo(videoEl, settings) {\n    forEachVideoSource(videoEl, function (sourceEl) {\n      setOriginalsObject(sourceEl, attrsSrc);\n      setAttributeIfValue(sourceEl, SRC, getData(sourceEl, settings.data_src));\n    });\n    setOriginalsObject(videoEl, attrsSrcPoster);\n    setAttributeIfValue(videoEl, POSTER, getData(videoEl, settings.data_poster));\n    setAttributeIfValue(videoEl, SRC, getData(videoEl, settings.data_src));\n    videoEl.load();\n  };\n  var setSourcesObject = function setSourcesObject(object, settings) {\n    setOriginalsObject(object, attrsData);\n    setAttributeIfValue(object, DATA, getData(object, settings.data_src));\n  };\n  var setBackground = function setBackground(element, settings, instance) {\n    var bg1xValue = getData(element, settings.data_bg);\n    var bgHiDpiValue = getData(element, settings.data_bg_hidpi);\n    var bgDataValue = isHiDpi && bgHiDpiValue ? bgHiDpiValue : bg1xValue;\n    if (!bgDataValue) return;\n    element.style.backgroundImage = "url(\\"".concat(bgDataValue, "\\")");\n    getTempImage(element).setAttribute(SRC, bgDataValue);\n    manageLoading(element, settings, instance);\n  }; // NOTE: THE TEMP IMAGE TRICK CANNOT BE DONE WITH data-multi-bg\n  // BECAUSE INSIDE ITS VALUES MUST BE WRAPPED WITH URL() AND ONE OF THEM\n  // COULD BE A GRADIENT BACKGROUND IMAGE\n\n  var setMultiBackground = function setMultiBackground(element, settings, instance) {\n    var bg1xValue = getData(element, settings.data_bg_multi);\n    var bgHiDpiValue = getData(element, settings.data_bg_multi_hidpi);\n    var bgDataValue = isHiDpi && bgHiDpiValue ? bgHiDpiValue : bg1xValue;\n\n    if (!bgDataValue) {\n      return;\n    }\n\n    element.style.backgroundImage = bgDataValue;\n    manageApplied(element, settings, instance);\n  };\n  var setImgsetBackground = function setImgsetBackground(element, settings, instance) {\n    var bgImgSetDataValue = getData(element, settings.data_bg_set);\n\n    if (!bgImgSetDataValue) {\n      return;\n    }\n\n    var imgSetValues = bgImgSetDataValue.split("|");\n    var bgImageValues = imgSetValues.map(function (value) {\n      return "image-set(".concat(value, ")");\n    });\n    element.style.backgroundImage = bgImageValues.join(); // Temporary fix for Chromeium with the -webkit- prefix\n\n    if (element.style.backgroundImage === \'\') {\n      bgImageValues = imgSetValues.map(function (value) {\n        return "-webkit-image-set(".concat(value, ")");\n      });\n      element.style.backgroundImage = bgImageValues.join();\n    }\n\n    manageApplied(element, settings, instance);\n  };\n  var setSourcesFunctions = {\n    IMG: setSourcesImg,\n    IFRAME: setSourcesIframe,\n    VIDEO: setSourcesVideo,\n    OBJECT: setSourcesObject\n  };\n  var setSourcesNative = function setSourcesNative(element, settings) {\n    var setSourcesFunction = setSourcesFunctions[element.tagName];\n\n    if (!setSourcesFunction) {\n      return;\n    }\n\n    setSourcesFunction(element, settings);\n  };\n  var setSources = function setSources(element, settings, instance) {\n    var setSourcesFunction = setSourcesFunctions[element.tagName];\n\n    if (!setSourcesFunction) {\n      return;\n    }\n\n    setSourcesFunction(element, settings);\n    manageLoading(element, settings, instance);\n  };\n\n  var elementsWithLoadEvent = ["IMG", "IFRAME", "VIDEO", "OBJECT"];\n  var hasLoadEvent = function hasLoadEvent(element) {\n    return elementsWithLoadEvent.indexOf(element.tagName) > -1;\n  };\n  var checkFinish = function checkFinish(settings, instance) {\n    if (instance && !isSomethingLoading(instance) && !haveElementsToLoad(instance)) {\n      safeCallback(settings.callback_finish, instance);\n    }\n  };\n  var addEventListener = function addEventListener(element, eventName, handler) {\n    element.addEventListener(eventName, handler);\n    element.llEvLisnrs[eventName] = handler;\n  };\n  var removeEventListener = function removeEventListener(element, eventName, handler) {\n    element.removeEventListener(eventName, handler);\n  };\n  var hasEventListeners = function hasEventListeners(element) {\n    return !!element.llEvLisnrs;\n  };\n  var addEventListeners = function addEventListeners(element, loadHandler, errorHandler) {\n    if (!hasEventListeners(element)) element.llEvLisnrs = {};\n    var loadEventName = element.tagName === "VIDEO" ? "loadeddata" : "load";\n    addEventListener(element, loadEventName, loadHandler);\n    addEventListener(element, "error", errorHandler);\n  };\n  var removeEventListeners = function removeEventListeners(element) {\n    if (!hasEventListeners(element)) {\n      return;\n    }\n\n    var eventListeners = element.llEvLisnrs;\n\n    for (var eventName in eventListeners) {\n      var handler = eventListeners[eventName];\n      removeEventListener(element, eventName, handler);\n    }\n\n    delete element.llEvLisnrs;\n  };\n  var doneHandler = function doneHandler(element, settings, instance) {\n    deleteTempImage(element);\n    updateLoadingCount(instance, -1);\n    decreaseToLoadCount(instance);\n    removeClass(element, settings.class_loading);\n\n    if (settings.unobserve_completed) {\n      unobserve(element, instance);\n    }\n  };\n  var loadHandler = function loadHandler(event, element, settings, instance) {\n    var goingNative = hasStatusNative(element);\n    doneHandler(element, settings, instance);\n    addClass(element, settings.class_loaded);\n    setStatus(element, statusLoaded);\n    safeCallback(settings.callback_loaded, element, instance);\n    if (!goingNative) checkFinish(settings, instance);\n  };\n  var errorHandler = function errorHandler(event, element, settings, instance) {\n    var goingNative = hasStatusNative(element);\n    doneHandler(element, settings, instance);\n    addClass(element, settings.class_error);\n    setStatus(element, statusError);\n    safeCallback(settings.callback_error, element, instance);\n    if (settings.restore_on_error) restoreOriginalAttrs(element, attrsSrcSrcsetSizes);\n    if (!goingNative) checkFinish(settings, instance);\n  };\n  var addOneShotEventListeners = function addOneShotEventListeners(element, settings, instance) {\n    var elementToListenTo = getTempImage(element) || element;\n\n    if (hasEventListeners(elementToListenTo)) {\n      // This happens when loading is retried twice\n      return;\n    }\n\n    var _loadHandler = function _loadHandler(event) {\n      loadHandler(event, element, settings, instance);\n      removeEventListeners(elementToListenTo);\n    };\n\n    var _errorHandler = function _errorHandler(event) {\n      errorHandler(event, element, settings, instance);\n      removeEventListeners(elementToListenTo);\n    };\n\n    addEventListeners(elementToListenTo, _loadHandler, _errorHandler);\n  };\n\n  var loadBackground = function loadBackground(element, settings, instance) {\n    addTempImage(element);\n    addOneShotEventListeners(element, settings, instance);\n    saveOriginalBackgroundStyle(element);\n    setBackground(element, settings, instance);\n    setMultiBackground(element, settings, instance);\n    setImgsetBackground(element, settings, instance);\n  };\n\n  var loadRegular = function loadRegular(element, settings, instance) {\n    addOneShotEventListeners(element, settings, instance);\n    setSources(element, settings, instance);\n  };\n\n  var load = function load(element, settings, instance) {\n    if (hasLoadEvent(element)) {\n      loadRegular(element, settings, instance);\n    } else {\n      loadBackground(element, settings, instance);\n    }\n  };\n  var loadNative = function loadNative(element, settings, instance) {\n    element.setAttribute("loading", "lazy");\n    addOneShotEventListeners(element, settings, instance);\n    setSourcesNative(element, settings);\n    setStatus(element, statusNative);\n  };\n\n  var removeImageAttributes = function removeImageAttributes(element) {\n    element.removeAttribute(SRC);\n    element.removeAttribute(SRCSET);\n    element.removeAttribute(SIZES);\n  };\n\n  var resetSourcesImg = function resetSourcesImg(element) {\n    forEachPictureSource(element, function (sourceTag) {\n      removeImageAttributes(sourceTag);\n    });\n    removeImageAttributes(element);\n  };\n\n  var restoreImg = function restoreImg(imgEl) {\n    forEachPictureSource(imgEl, function (sourceEl) {\n      restoreOriginalAttrs(sourceEl, attrsSrcSrcsetSizes);\n    });\n    restoreOriginalAttrs(imgEl, attrsSrcSrcsetSizes);\n  };\n  var restoreVideo = function restoreVideo(videoEl) {\n    forEachVideoSource(videoEl, function (sourceEl) {\n      restoreOriginalAttrs(sourceEl, attrsSrc);\n    });\n    restoreOriginalAttrs(videoEl, attrsSrcPoster);\n    videoEl.load();\n  };\n  var restoreIframe = function restoreIframe(iframeEl) {\n    restoreOriginalAttrs(iframeEl, attrsSrc);\n  };\n  var restoreObject = function restoreObject(objectEl) {\n    restoreOriginalAttrs(objectEl, attrsData);\n  };\n  var restoreFunctions = {\n    IMG: restoreImg,\n    IFRAME: restoreIframe,\n    VIDEO: restoreVideo,\n    OBJECT: restoreObject\n  };\n\n  var restoreAttributes = function restoreAttributes(element) {\n    var restoreFunction = restoreFunctions[element.tagName];\n\n    if (!restoreFunction) {\n      restoreOriginalBgImage(element);\n      return;\n    }\n\n    restoreFunction(element);\n  };\n\n  var resetClasses = function resetClasses(element, settings) {\n    if (hasEmptyStatus(element) || hasStatusNative(element)) {\n      return;\n    }\n\n    removeClass(element, settings.class_entered);\n    removeClass(element, settings.class_exited);\n    removeClass(element, settings.class_applied);\n    removeClass(element, settings.class_loading);\n    removeClass(element, settings.class_loaded);\n    removeClass(element, settings.class_error);\n  };\n\n  var restore = function restore(element, settings) {\n    restoreAttributes(element);\n    resetClasses(element, settings);\n    resetStatus(element);\n    deleteOriginalAttrs(element);\n  };\n\n  var cancelLoading = function cancelLoading(element, entry, settings, instance) {\n    if (!settings.cancel_on_exit) return;\n    if (!hasStatusLoading(element)) return;\n    if (element.tagName !== "IMG") return; //Works only on images\n\n    removeEventListeners(element);\n    resetSourcesImg(element);\n    restoreImg(element);\n    removeClass(element, settings.class_loading);\n    updateLoadingCount(instance, -1);\n    resetStatus(element);\n    safeCallback(settings.callback_cancel, element, entry, instance);\n  };\n\n  var onEnter = function onEnter(element, entry, settings, instance) {\n    var dontLoad = hadStartedLoading(element);\n    /* Save status \n    before setting it, to prevent loading it again. Fixes #526. */\n\n    setStatus(element, statusEntered);\n    addClass(element, settings.class_entered);\n    removeClass(element, settings.class_exited);\n    unobserveEntered(element, settings, instance);\n    safeCallback(settings.callback_enter, element, entry, instance);\n    if (dontLoad) return;\n    load(element, settings, instance);\n  };\n  var onExit = function onExit(element, entry, settings, instance) {\n    if (hasEmptyStatus(element)) return; //Ignore the first pass, at landing\n\n    addClass(element, settings.class_exited);\n    cancelLoading(element, entry, settings, instance);\n    safeCallback(settings.callback_exit, element, entry, instance);\n  };\n\n  var tagsWithNativeLazy = ["IMG", "IFRAME", "VIDEO"];\n  var shouldUseNative = function shouldUseNative(settings) {\n    return settings.use_native && "loading" in HTMLImageElement.prototype;\n  };\n  var loadAllNative = function loadAllNative(elements, settings, instance) {\n    elements.forEach(function (element) {\n      if (tagsWithNativeLazy.indexOf(element.tagName) === -1) {\n        return;\n      }\n\n      loadNative(element, settings, instance);\n    });\n    setToLoadCount(instance, 0);\n  };\n\n  var isIntersecting = function isIntersecting(entry) {\n    return entry.isIntersecting || entry.intersectionRatio > 0;\n  };\n\n  var getObserverSettings = function getObserverSettings(settings) {\n    return {\n      root: settings.container === document ? null : settings.container,\n      rootMargin: settings.thresholds || settings.threshold + "px"\n    };\n  };\n\n  var intersectionHandler = function intersectionHandler(entries, settings, instance) {\n    entries.forEach(function (entry) {\n      return isIntersecting(entry) ? onEnter(entry.target, entry, settings, instance) : onExit(entry.target, entry, settings, instance);\n    });\n  };\n\n  var observeElements = function observeElements(observer, elements) {\n    elements.forEach(function (element) {\n      observer.observe(element);\n    });\n  };\n  var updateObserver = function updateObserver(observer, elementsToObserve) {\n    resetObserver(observer);\n    observeElements(observer, elementsToObserve);\n  };\n  var setObserver = function setObserver(settings, instance) {\n    if (!supportsIntersectionObserver || shouldUseNative(settings)) {\n      return;\n    }\n\n    instance._observer = new IntersectionObserver(function (entries) {\n      intersectionHandler(entries, settings, instance);\n    }, getObserverSettings(settings));\n  };\n\n  var toArray = function toArray(nodeSet) {\n    return Array.prototype.slice.call(nodeSet);\n  };\n  var queryElements = function queryElements(settings) {\n    return settings.container.querySelectorAll(settings.elements_selector);\n  };\n  var excludeManagedElements = function excludeManagedElements(elements) {\n    return toArray(elements).filter(hasEmptyStatus);\n  };\n  var hasError = function hasError(element) {\n    return hasStatusError(element);\n  };\n  var filterErrorElements = function filterErrorElements(elements) {\n    return toArray(elements).filter(hasError);\n  };\n  var getElementsToLoad = function getElementsToLoad(elements, settings) {\n    return excludeManagedElements(elements || queryElements(settings));\n  };\n\n  var retryLazyLoad = function retryLazyLoad(settings, instance) {\n    var errorElements = filterErrorElements(queryElements(settings));\n    errorElements.forEach(function (element) {\n      removeClass(element, settings.class_error);\n      resetStatus(element);\n    });\n    instance.update();\n  };\n  var setOnlineCheck = function setOnlineCheck(settings, instance) {\n    if (!runningOnBrowser) {\n      return;\n    }\n\n    instance._onlineHandler = function () {\n      retryLazyLoad(settings, instance);\n    };\n\n    window.addEventListener("online", instance._onlineHandler);\n  };\n  var resetOnlineCheck = function resetOnlineCheck(instance) {\n    if (!runningOnBrowser) {\n      return;\n    }\n\n    window.removeEventListener("online", instance._onlineHandler);\n  };\n\n  var LazyLoad = function LazyLoad(customSettings, elements) {\n    var settings = getExtendedSettings(customSettings);\n    this._settings = settings;\n    this.loadingCount = 0;\n    setObserver(settings, this);\n    setOnlineCheck(settings, this);\n    this.update(elements);\n  };\n\n  LazyLoad.prototype = {\n    update: function update(givenNodeset) {\n      var settings = this._settings;\n      var elementsToLoad = getElementsToLoad(givenNodeset, settings);\n      setToLoadCount(this, elementsToLoad.length);\n\n      if (isBot || !supportsIntersectionObserver) {\n        this.loadAll(elementsToLoad);\n        return;\n      }\n\n      if (shouldUseNative(settings)) {\n        loadAllNative(elementsToLoad, settings, this);\n        return;\n      }\n\n      updateObserver(this._observer, elementsToLoad);\n    },\n    destroy: function destroy() {\n      // Observer\n      if (this._observer) {\n        this._observer.disconnect();\n      } // Clean handlers\n\n\n      resetOnlineCheck(this); // Clean custom attributes on elements\n\n      queryElements(this._settings).forEach(function (element) {\n        deleteOriginalAttrs(element);\n      }); // Delete all internal props\n\n      delete this._observer;\n      delete this._settings;\n      delete this._onlineHandler;\n      delete this.loadingCount;\n      delete this.toLoadCount;\n    },\n    loadAll: function loadAll(elements) {\n      var _this = this;\n\n      var settings = this._settings;\n      var elementsToLoad = getElementsToLoad(elements, settings);\n      elementsToLoad.forEach(function (element) {\n        unobserve(element, _this);\n        load(element, settings, _this);\n      });\n    },\n    restoreAll: function restoreAll() {\n      var settings = this._settings;\n      queryElements(settings).forEach(function (element) {\n        restore(element, settings);\n      });\n    }\n  };\n\n  LazyLoad.load = function (element, customSettings) {\n    var settings = getExtendedSettings(customSettings);\n    load(element, settings);\n  };\n\n  LazyLoad.resetStatus = function (element) {\n    resetStatus(element);\n  }; // Automatic instances creation if required (useful for async script loading)\n\n\n  if (runningOnBrowser) {\n    autoInitialize(LazyLoad, window.lazyLoadOptions);\n  }\n\n  return LazyLoad;\n\n})));\n'},2307:function(e,n){e.exports=function(e){function n(e){"undefined"!==typeof console&&(console.error||console.log)("[Script Loader]",e)}function t(){return"undefined"!==typeof attachEvent&&"undefined"===typeof addEventListener}try{if("undefined"!==typeof execScript&&t())execScript(e);else if("undefined"!==typeof eval)eval.call(null,e);else n("EvalError: No eval function available")}catch(e){n(e)}}}});